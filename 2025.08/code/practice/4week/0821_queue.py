# ===== 예시 입력(문제 그림 기반) =====
# 7 8
# 1 2 1 3 2 4 2 5 4 6 5 6 6 7 3 7
# ===================================

V, E = map(int, input().split())  # V: 정점 개수(정점 번호는 1..V), E: 간선 개수
arr = list(map(int, input().split()))  # 간선 정보를 일렬로 입력받음(총 2*E개 숫자, (u,v) 쌍들이 이어짐)

# 인접 리스트(Adjacency List) 준비: 정점 번호가 1부터 시작하므로 V+1 크기로 만들고 0번은 미사용
adj_lst = [[] for _ in range(V + 1)]  # 예: adj_lst[u] = [u와 인접한 정점들]


def bfs(s, V):
    """
    s: 시작 정점
    V: 정점 개수(visited 크기를 정하기 위해 전달)
    """
    # 방문 및 거리 기록 배열
    # visited[x] == 0 이면 '미방문', 양수면 '방문'이며 '시작점에서의 거리 + 1'을 의미
    visited = [0] * (V + 1)

    # 큐(Queue) 준비: 여기서는 간단히 리스트로 사용(규모가 크면 deque 사용 권장)
    q = [s]

    # 시작 정점 방문 처리
    visited[s] = 1  # 1은 '거리 0'을 의미(실제 거리 = visited - 1)

    # 큐가 빌 때까지 탐색 반복
    while q:
        # 큐의 맨 앞 원소를 꺼냄(dequeue). 리스트 pop(0)는 O(n)이므로 대규모에선 deque 권장
        t = q.pop(0)

        # 방문한 정점을 즉시 출력. 문제 예시 형식에 맞춰 ' - ' 구분자를 붙임
        print(t, end=' - ')

        # 현재 정점 t와 '인접'한 모든 정점 w를 확인
        for w in adj_lst[t]:
            # 아직 방문하지 않은 정점이면
            if visited[w] == 0:
                # 큐에 넣어 다음 레벨에서 탐색하도록 함
                q.append(w)
                # 방문 표시 및 거리 기록(부모 t의 visited 값에 +1)
                # 예: 시작점이 1이면, 그 이웃은 2, 이웃의 이웃은 3 ...
                visited[w] = visited[t] + 1


# ----- 인접 리스트 구성 -----
# 입력으로 들어온 E개의 간선을 (v1, v2) 쌍으로 복원하여 무방향 그래프 양쪽에 모두 추가
for i in range(E):
    v1, v2 = arr[i * 2], arr[i * 2 + 1]  # i번째 간선의 양 끝점
    adj_lst[v1].append(v2)  # v1 -> v2
    adj_lst[v2].append(v1)  # v2 -> v1 (무방향이므로 역방향도 추가)

# BFS 실행: 문제에서 시작 정점이 1이므로 s=1
# 두 번째 인자는 정점 수로, 일반화하려면 bfs(1, V) 형태가 더 안전합니다.
bfs(1, 7)
